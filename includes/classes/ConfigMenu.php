<?php
namespace includes\classes;

use includes\interfaces\MenuInterface;
class ConfigMenu extends MenuInterface {
	private $prefix = 'config';
    public function getConfigs()
    {
        $configs = array(
            'page_title' => 'Configs',
            'menu_title' => 'Configs Menu',
            'capability' => 'manage_options',
            'menu_slug' => 'config',
            'icon_url' => '',
            'position' => 10,
        );
        return array_merge(parent::getConfigs(), $configs);
    }

    public function getAttributes()
    {
        $attributes = array(
	        'facebook' => array(
	        	'label' => 'Facebook',
		        'param' => 'facebook'
	        ),
	        'linkedin' => array(
		        'label' => 'Linkedin',
		        'param' => 'linkedin'
	        ),
	        'google-plus' => array(
		        'label' => 'Google Plus',
		        'param' => 'google-plus'
	        ),
	        'twitter' => array(
		        'label' => 'Twitter',
		        'param' => 'twitter'
	        ),
            'hotline' => array(
                'label' => 'Hotline',
                'param' => 'hotline'
            ),
            'support' => array(
                'label' => 'Support',
                'param' => 'support'
            ),
            'support_phone' => array(
                'label' => 'Support Phone',
                'param' => 'support_phone'
            ),
            'address' => array(
                'label' => 'Address',
                'param' => 'address'
            ),
            'consultant' => array(
                'label' => 'Consultant',
                'param' => 'consultant'
            ),
        );
        return array_merge(parent::getAttributes(), $attributes); // TODO: Change the autogenerated stub
    }

    public function callBackFunc()
    {
        $template = \includes\Bootstrap::bootstrap()->helper->getPathTemplate('configs/form');
        echo \includes\Bootstrap::bootstrap()->helper->render($template, array( 'context' => $this,'attributes' => $this->getAttributes() ));
    }

    /**
     * @param $attributes array
     */
    public function saveAttributes($attributes) {
	    /**
	     * @var $attribute
	     */
		foreach ($attributes as $key => $value) {
            $this->saveAttribute($key, $value);
		}
    }
}